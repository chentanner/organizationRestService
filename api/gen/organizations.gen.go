// Package Api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Address defines model for address.
type Address struct {
	City          *string `json:"city,omitempty"`
	CountryCode   *string `json:"countryCode,omitempty"`
	PostalCode    *string `json:"postalCode,omitempty"`
	ProvState     *string `json:"provState,omitempty"`
	StreetAddress *string `json:"streetAddress,omitempty"`
	Suite         *string `json:"suite,omitempty"`
}

// BaseCollection defines model for baseCollection.
type BaseCollection struct {
	Count        *int    `json:"count,omitempty"`
	ErrorCode    *string `json:"errorCode,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Limit        *int    `json:"limit,omitempty"`
	Links        *string `json:"links,omitempty"`
	Start        *int    `json:"start,omitempty"`
}

// BaseObject defines model for baseObject.
type BaseObject struct {
	Expired  *string `json:"expired,omitempty"`
	Versions *string `json:"versions,omitempty"`
}

// Company defines model for company.
type Company struct {
	Comments                             *string `json:"comments,omitempty"`
	ConfirmCloseText                     *string `json:"confirmCloseText,omitempty"`
	DefaultMtmCurrencyConversionDateRule *string `json:"defaultMtmCurrencyConversionDateRule,omitempty"`
	NearestSettleDayRule                 *string `json:"nearestSettleDayRule,omitempty"`
}

// Counterparty defines model for counterparty.
type Counterparty struct {
	Comments                 *string  `json:"comments,omitempty"`
	CreditDefaultProbability *float64 `json:"creditDefaultProbability,omitempty"`
	HolidayCode              *string  `json:"holidayCode,omitempty"`
	IndustryCode             *string  `json:"industryCode,omitempty"`
	InternalRatingCode       *string  `json:"internalRatingCode,omitempty"`
	LastCreditAssessmentDate *string  `json:"lastCreditAssessmentDate,omitempty"`
	MoodyRatingCode          *string  `json:"moodyRatingCode,omitempty"`
	SpRatingCode             *string  `json:"spRatingCode,omitempty"`
}

// Organization defines model for organization.
type Organization struct {
	// Embedded struct due to allOf(#/components/schemas/address)
	Address
	// Embedded struct due to allOf(#/components/schemas/baseObject)
	BaseObject
	// Embedded fields due to inline allOf schema
	ID                             *int    `json:"ID,omitempty"`
	CftcInterimCompliantIdentifier *string `json:"cftcInterimCompliantIdentifier,omitempty"`
	LegalEntityIdentifier          *string `json:"legalEntityIdentifier,omitempty"`
	LegalName                      *string `json:"legalName,omitempty"`
	Name                           *string `json:"name,omitempty"`
	XRefCode                       *string `json:"xRefCode,omitempty"`
	XRefCode2                      *string `json:"xRefCode2,omitempty"`
}

// OrganizationCollection defines model for organizationCollection.
type OrganizationCollection struct {
	// Embedded struct due to allOf(#/components/schemas/baseCollection)
	BaseCollection
	// Embedded fields due to inline allOf schema
	Items *Organizations `json:"items,omitempty"`
}

// Organizations defines model for organizations.
type Organizations []Organization

// GetOrganizationsParams defines parameters for GetOrganizations.
type GetOrganizationsParams struct {
	Start *int `json:"start,omitempty"`
	Limit *int `json:"limit,omitempty"`
}

// createOrganizationJSONBody defines parameters for CreateOrganization.
type createOrganizationJSONBody Organization

// CreateOrganizationRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody createOrganizationJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets organizations// (GET /organizations)
	GetOrganizations(ctx echo.Context, params GetOrganizationsParams) error
	// Create an organization// (POST /organizations)
	CreateOrganization(ctx echo.Context) error
	// Gets organization by id// (GET /organizations/{id})
	GetOrganization(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationsParams
	// ------------- Optional query parameter "start" -------------
	if paramValue := ctx.QueryParam("start"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrganizations(ctx, params)
	return err
}

// CreateOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrganization(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOrganization(ctx)
	return err
}

// GetOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrganization(ctx, id)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/organizations", wrapper.GetOrganizations)
	router.POST("/organizations", wrapper.CreateOrganization)
	router.GET("/organizations/:id", wrapper.GetOrganization)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWS2/bRhD+K4ttj4JluzfeUrkojCJ1ofRW5LDiDqlJ9pWZoWvW0H8vdilFL1JWAhTo",
	"SRRndh7fft8MX3UdfYoBgrCuXjXXa/CmPBprCbg8JooJSBDKvxqlz7/SJ9CVZiEMrd7MdB27INQvooVR",
	"e4osxk2bKT5/ECPjVhYCkHf7os49Ohw9u5nt3sTVJ6gl+64MwyI6B7VgDCM95lYOYmEQaIHyUSCKNNlE",
	"sb4HZtOOOzj0OBHZYfg80ZoYGj001dvT8O+sL3hJSGBHkzwDMcbAV0KYiWNCP4ad9zs+jXAkNEh+4SLD",
	"n/Aio04WGtM5eS9+0RFBqPtFDNvyHozAsnPj4AYwBCwfQMTBg+knHMfb6YIAJUPyzT0RWJSHoeg/KK7M",
	"Ct1WJE0kb0RX2sZu5UB/zRw6vxqufR0dWjMtGwy240u6ymygYNzSCIZ20s0ZlkUp9R0zMOeGHqbk5mO0",
	"/RsBOV10GEM5UmsC/mN2qjPOPTW6+utV/0jQ6Er/MN8PpPl2Gs13o2gzu+x3wPzsenyFjw/jqqsbqR8z",
	"gugX0SeHJsijhSDYINA4ktAa90sQlP4az9+Nn6DrlOFlCc0k7Dvj/VWYfzxB/XjqXYf/ybQ8xxYFfHm4",
	"FOWwCr6m1O8LrfeBDZHp9WZTNNLEghdKHgl6Eb2PFqVXS+TPatCF2gtDf52HutJ3N7eFvAmCSagr/dPN",
	"7c29nulkZF2Km5/V3UKZbRa4JkwD3noJ0lFgZZRDFhUbZZxTR2dniruUIgmrZNp8qSUxFeuj1VWO/HSU",
	"LddBxoMAcbnL46RUkqqyeNQwdnJmgjqSZdVQ9ErWoMqSUSkyloMZM13pLx1Qr3dc3W6i2fZDYXwlnRZw",
	"nlOi2lZV4mFov7GMYYteLOPjTBNwioEHjt7f3g6TPAgMu92k5LAuIM4/8SCIfcBr+XYojE1ZXoe9P/1W",
	"mM6d94Z6XelfQVidSGH4NMpJj2+6JjACh5etc1NfOmD5Odr+P+lnrIvlkFOtou3VoWkoZ/ikEOpgcwb6",
	"3bkKFqUtewLM8FaZoE6qmZ2oa/6KdnOFxBhD6+Ao2kz9jbIuNEP7lrDe0hXaTOkcKx6fKoTNo2HP15Lt",
	"f0DW76OoWvUZr3KWgZ53eHTkdKXXIomr+dwkvBmsNwIs8+e7PNL/DQAA//8fkbcdYgwAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

